module datapath(lt,gt,eq,lda,ldb,sel1,sel2,sel_in,data_in,clk);
input[15:0]data_in;
input lda,ldb,sel1,sel2,sel_in,clk;
output lt,gt,eq;

wire[15:0]bus,aout,bout,x,y,subout;

PIPO A(aout,bus,lda,clk);
PIPO B(bout,bus,ldb,clk);

MUX mux1(x,aout,bout,sel1);
MUX mux2(y,aout,bout,sel2);
MUX mux_in(bus,subout,data_in,sel_in);

SUB SB(subout,x,y);
CMP CMP1(lt,gt,eq,aout,bout);
endmodule

module PIPO(data_out,data_in,load,clk);
input[15:0]data_in;
input clk,load;
output reg[15:0]data_out;

always@(posedge clk)
if(load)
data_out<=data_in;
endmodule

module MUX(out,in0,in1,sel);         // 0--> aout , 1-->bout, 0-->subout, 1---->data_in
input[15:0]in0,in1;
input sel;
output[15:0]out;

assign out = sel? in1:in0;
endmodule

module SUB(out,in1,in0);
input[15:0]in1,in0;
output[15:0]out;

assign out = in1-in0;
endmodule

module CMP(lt,gt,eq,data1,data2);
input[15:0]data1,data2;
output lt,gt,eq;

assign lt = (data1 < data2);
assign gt = (data1 > data2);
assign eq = (data1 == data2);
endmodule
